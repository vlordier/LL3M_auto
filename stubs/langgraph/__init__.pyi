"""Type stubs for LangGraph."""

from collections.abc import Callable
from typing import Any, Generic, TypeVar

from typing_extensions import ParamSpec

S = TypeVar("S")  # State type
R = TypeVar("R")  # Return type
T = TypeVar("T")  # Generic type
P = ParamSpec("P")

class Pregel[S, R, T]:
    """LangGraph Pregel class stub."""
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    async def ainvoke(self, input: S, config: dict[str, Any] | None = None) -> S: ...
    def invoke(self, input: S, config: dict[str, Any] | None = None) -> S: ...

class StateGraph[S]:
    """LangGraph StateGraph class stub."""
    def __init__(self, schema: type[S]) -> None: ...
    def add_node(self, name: str, func: Callable[[S], Any]) -> None: ...
    def add_edge(self, start: str, end: str) -> None: ...
    def add_conditional_edges(
        self, start: str, condition: Callable[[S], str], mapping: dict[str, str]
    ) -> None: ...
    def set_entry_point(self, name: str) -> None: ...
    def set_finish_point(self, name: str) -> None: ...
    def compile(self, checkpointer: Any | None = None) -> Pregel[S, None, Any]: ...

def START() -> str: ...
def END() -> str: ...
