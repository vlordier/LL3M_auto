[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ll3m"
version = "0.1.0"
description = "Large Language 3D Modelers - Multi-agent system for generating 3D assets"
authors = [{name = "LL3M Team"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "langgraph>=0.0.40",
    "openai>=1.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "aiohttp>=3.8.0",
    "aiofiles>=22.0.0",
    "python-dotenv>=1.0.0",
    "PyYAML>=6.0",
    "click>=8.0.0",
    "structlog>=22.0.0",
    "rich>=13.0.0",
    # API dependencies
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "asyncpg>=0.29.0",  # PostgreSQL async driver
    "aiosqlite>=0.19.0",  # SQLite async driver for development
    "slowapi>=0.1.9",  # Rate limiting
    "python-jose[cryptography]>=3.3.0",  # JWT tokens
    "passlib[bcrypt]>=1.7.4",  # Password hashing
    "python-multipart>=0.0.6",  # Form data support
    "psutil>=5.9.0",  # System and process monitoring
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",  # For benchmark tests
    "httpx>=0.25.0",  # Required for FastAPI TestClient
    "ruff>=0.5.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "pyupgrade>=3.19.0",
    "bandit[toml]>=1.7.0",  # Security scanning
    "pbr>=6.0.0",  # Required by bandit
    # Type stubs for better type checking
    "types-PyYAML>=6.0.0",
    "types-passlib>=1.7.0",
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[project.scripts]
ll3m = "cli:main"

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "C90", # mccabe complexity
    "N",  # pep8-naming
    "D",  # pydocstyle
    "S",  # flake8-bandit (security)
]
ignore = [
    "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107",  # Docstring rules
    "D200", "D201", "D202", "D203", "D204", "D205", "D206", "D207",
    "D208", "D209", "D210", "D211", "D212", "D213", "D214", "D215",
    "E501", "E402", "E722",  # Line length, import order, bare except
    "F401", "F706", "F811", "F821",  # Import and variable issues
    "B008", "B904", "B905",  # Function default and context manager issues
    "S102", "S103", "S104", "S105", "S106", "S108", "S110", "S603",  # Security rules
    "ARG001", "ARG002", "ARG005",  # Unused arguments
    "N802", "N803", "N806",  # Naming conventions
    "UP006", "UP007", "UP035",  # Upgrade rules
    "C901", "PLR0913", "PLR2004", "PLR0915",  # Complexity rules
    "TRY003", "EM101", "EM102",  # Exception handling
    "COM812", "ISC001",  # Trailing comma and string concatenation
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["D", "S101", "S102", "S103", "S104", "S105", "S106", "S108", "S110", "S603", "ARG001", "ARG002", "ARG005", "C901", "E501", "E722"]  # Relax rules for tests
"test_*.py" = ["D", "S101", "S102", "S103", "S104", "S105", "S106", "S108", "S110", "S603", "ARG001", "ARG002", "ARG005", "C901", "E501", "E722"]  # Any test files
"setup/*" = ["S102", "S103", "S104", "S603", "E501", "E402"]  # Setup scripts can be more permissive
"stubs/*" = ["N802"]  # Allow uppercase functions in stubs
"renders/**/*" = ["D", "ALL"]  # Generated/render files can ignore all rules
"verify_setup.py" = ["S603", "E722", "S110", "E501"]  # Verification script exceptions

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_calls = false
disallow_any_generics = true
disallow_any_unimported = false
disallow_any_expr = false  # Too strict for external libs
disallow_any_decorated = false  # Disabled due to test decorators
disallow_any_explicit = false  # Allow explicit Any when needed
disallow_subclassing_any = false
check_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
strict_equality = true
extra_checks = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
mypy_path = "stubs"
disable_error_code = ["assignment", "type-arg", "unused-ignore"]  # Removed var-annotated for better variable typing

# SQLAlchemy-specific ignores for routes that deal with ORM models
[[tool.mypy.overrides]]
module = "src.api.routes.*"
disable_error_code = ["arg-type"]  # Ignore SQLAlchemy Column type issues

# Stricter checking for cleaned-up modules
[[tool.mypy.overrides]]
module = "src.services.performance_monitor"
disallow_incomplete_defs = true
disallow_untyped_calls = true

[[tool.mypy.overrides]]
module = "src.utils.monitoring"
disallow_incomplete_defs = true
disallow_untyped_calls = true

[[tool.mypy.overrides]]
module = "src.api.routes.assets"
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = "src.api.routes.batches"
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = "src.api.app"
disallow_incomplete_defs = true

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_any_decorated = false

[[tool.mypy.overrides]]
module = "bpy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "src.workflow.graph"
disallow_any_unimported = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",  # Align with GOOD_PRACTICES.md
    "--durations=10",
    "-ra",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "blender: marks tests that require Blender",
    "benchmark: marks tests as performance benchmarks",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
env = [
    "ENVIRONMENT=test",
    "OPENAI_API_KEY=sk-test-mock-key-for-testing",
    "BLENDER_PATH=/usr/bin/blender",
]
