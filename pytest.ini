[tool:pytest]
# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test execution
addopts =
    --strict-markers
    --strict-config
    --verbosity=2
    --tb=short
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=85
    --durations=10
    --maxfail=3

# Markers
markers =
    unit: Unit tests - test individual components in isolation
    integration: Integration tests - test component interactions
    e2e: End-to-end tests - test complete user workflows
    performance: Performance tests - test system performance characteristics
    security: Security tests - test security validations and compliance
    load: Load tests - test system under load conditions
    smoke: Smoke tests - basic functionality verification
    slow: Slow tests - tests that take longer than 5 seconds
    network: Tests that require network access
    blender: Tests that require Blender installation
    local_llm: Tests that require local LLM setup
    production: Tests for production environment validation

# Test filtering
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning:asyncio
    ignore::PendingDeprecationWarning

# Timeout
timeout = 300
timeout_method = thread

# Coverage configuration
[coverage:run]
source = src
omit =
    */tests/*
    */venv/*
    */env/*
    */__pycache__/*
    */migrations/*
    */alembic/*
    setup.py

branch = true
parallel = true

[coverage:report]
show_missing = true
skip_covered = false
precision = 2
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
