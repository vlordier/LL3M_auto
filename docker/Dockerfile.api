# Multi-stage Docker build for LL3M API
FROM python:3.11-slim as base

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    gnupg \
    software-properties-common \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -r requirements.txt

# Stage 2: Blender runtime
FROM base as blender-runtime

# Install Blender and system dependencies for headless operation
RUN apt-get update && apt-get install -y \
    blender \
    xvfb \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libxi6 \
    libxkbcommon-x11-0 \
    && rm -rf /var/lib/apt/lists/*

# Verify Blender installation
RUN blender --version

# Stage 3: Production
FROM blender-runtime as production

# Create non-root user for security
RUN groupadd -r ll3m && useradd -r -g ll3m ll3m

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV ENVIRONMENT=production
ENV BLENDER_PATH=/usr/bin/blender

# Copy application code
COPY . .

# Set proper permissions
RUN chown -R ll3m:ll3m /app

# Switch to non-root user
USER ll3m

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/health || exit 1

# Expose port
EXPOSE 8000

# Run the application
CMD ["uvicorn", "src.api.app:create_app", "--factory", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
