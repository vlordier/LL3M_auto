version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ll3m-postgres
    environment:
      POSTGRES_DB: ll3m
      POSTGRES_USER: ll3m
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ll3m_dev_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - ll3m-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ll3m -d ll3m"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ll3m-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-ll3m_dev_redis}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ll3m-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # LL3M API Service
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
      target: production
    container_name: ll3m-api
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://ll3m:${POSTGRES_PASSWORD:-ll3m_dev_password}@postgres:5432/ll3m
      - REDIS_URL=redis://:${REDIS_PASSWORD:-ll3m_dev_redis}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - BLENDER_PATH=/usr/bin/blender
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - USE_LOCAL_LLM=${USE_LOCAL_LLM:-false}
      - LMSTUDIO_BASE_URL=${LMSTUDIO_BASE_URL:-http://host.docker.internal:1234/v1}
    volumes:
      - asset_storage:/app/storage
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - ll3m-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # LL3M Web Application
  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
        - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    container_name: ll3m-web
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    networks:
      - ll3m-network
    depends_on:
      - api
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ll3m-nginx
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - asset_storage:/var/www/assets:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - ll3m-network
    depends_on:
      - api
      - web
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ll3m-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ll3m-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana-oss:latest
    container_name: ll3m-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3001:3000"
    networks:
      - ll3m-network
    depends_on:
      - prometheus
    restart: unless-stopped

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  asset_storage:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Network for inter-service communication
networks:
  ll3m-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
